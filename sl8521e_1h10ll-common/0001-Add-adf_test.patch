From f9d83b25ec76e2bb88c371fa6903928d7ba92508 Mon Sep 17 00:00:00 2001
From: xunmod <116288337+xunmod@users.noreply.github.com>
Date: Tue, 27 Aug 2024 14:24:24 +0800
Subject: [PATCH] Add adf_test

---
 Android.mk          |   2 +
 adf_test/Android.mk |  27 +++
 adf_test/adf_test.c | 405 ++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 434 insertions(+)
 create mode 100644 adf_test/Android.mk
 create mode 100644 adf_test/adf_test.c

diff --git a/Android.mk b/Android.mk
index aedb3f9..7343ba4 100755
--- a/Android.mk
+++ b/Android.mk
@@ -447,6 +447,7 @@ ifeq ($(TW_EXCLUDE_NANO), true)
 endif
 
 TWRP_REQUIRED_MODULES += \
+	  adf_test \
     dump_image \
     erase_image \
     flash_image \
@@ -929,6 +930,7 @@ include $(commands_TWRP_local_path)/injecttwrp/Android.mk \
     $(commands_TWRP_local_path)/bmlutils/Android.mk \
     $(commands_TWRP_local_path)/prebuilt/Android.mk \
     $(commands_TWRP_local_path)/mtdutils/Android.mk \
+    $(commands_TWRP_local_path)/adf_test/Android.mk \
     $(commands_TWRP_local_path)/flashutils/Android.mk \
     $(commands_TWRP_local_path)/pigz/Android.mk \
     $(commands_TWRP_local_path)/libtar/Android.mk \
diff --git a/adf_test/Android.mk b/adf_test/Android.mk
new file mode 100644
index 0000000..7dceb1b
--- /dev/null
+++ b/adf_test/Android.mk
@@ -0,0 +1,27 @@
+#
+# Copyright (C) 2013 The Android Open Source Project
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+LOCAL_PATH := $(my-dir)
+
+include $(CLEAR_VARS)
+LOCAL_SRC_FILES := adf_test.c
+LOCAL_MODULE := adf_test
+LOCAL_MODULE_STEM := twrp
+LOCAL_MODULE_TAGS := eng
+LOCAL_MODULE_CLASS := RECOVERY_EXECUTABLES
+LOCAL_PACK_MODULE_RELOCATIONS := false
+LOCAL_MODULE_PATH := $(TARGET_RECOVERY_ROOT_OUT)/sbin
+LOCAL_WHOLE_STATIC_LIBRARIES += libadf
+include $(BUILD_EXECUTABLE)
diff --git a/adf_test/adf_test.c b/adf_test/adf_test.c
new file mode 100644
index 0000000..4ac4c5f
--- /dev/null
+++ b/adf_test/adf_test.c
@@ -0,0 +1,405 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <fcntl.h>
+#include <unistd.h>
+#include <stdlib.h>
+
+#include <adf/adf.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <string.h>
+#include <errno.h>
+#include <sys/mman.h>
+
+#define ASSERT(STMT, ...) \
+  if (!(STMT)) { \
+    fprintf(stderr, __VA_ARGS__); \
+    return 1; \
+  }
+
+#define ASSERT_TRUE(STMT) ASSERT(STMT, "Line %d, false statement: `" #STMT "'\n", __LINE__)
+
+struct adf_device dev;
+adf_id_t intf_id;
+int intf;
+adf_id_t eng_id;
+int eng;
+
+uint32_t fmt8888[] = {
+  ((uint32_t)('X') | ((uint32_t)('R') << 8) | ((uint32_t)('2') << 16) | ((uint32_t)('4') << 24)),
+  ((uint32_t)('X') | ((uint32_t)('B') << 8) | ((uint32_t)('2') << 16) | ((uint32_t)('4') << 24)),
+  ((uint32_t)('R') | ((uint32_t)('X') << 8) | ((uint32_t)('2') << 16) | ((uint32_t)('4') << 24)),
+  ((uint32_t)('B') | ((uint32_t)('X') << 8) | ((uint32_t)('2') << 16) | ((uint32_t)('4') << 24)),
+  ((uint32_t)('A') | ((uint32_t)('R') << 8) | ((uint32_t)('2') << 16) | ((uint32_t)('4') << 24)),
+  ((uint32_t)('A') | ((uint32_t)('B') << 8) | ((uint32_t)('2') << 16) | ((uint32_t)('4') << 24)),
+  ((uint32_t)('R') | ((uint32_t)('A') << 8) | ((uint32_t)('2') << 16) | ((uint32_t)('4') << 24)),
+  ((uint32_t)('B') | ((uint32_t)('A') << 8) | ((uint32_t)('2') << 16) | ((uint32_t)('4') << 24))
+};
+size_t n_fmt8888 = sizeof(fmt8888) / sizeof(fmt8888[0]);
+
+void teardown(void) {
+  if (eng >= 0)
+    close(eng);
+  if (intf >= 0)
+    close(intf);
+  adf_device_close(&dev);
+}
+
+int setup() {
+  adf_id_t dev_id = 0;
+
+  int err = adf_device_open(dev_id, O_RDWR, &dev);
+  ASSERT(err >= 0, "opening ADF device %d failed: %s\n", dev_id, strerror(-err));
+  err = adf_find_simple_post_configuration(&dev, fmt8888, n_fmt8888, &intf_id, &eng_id);
+  ASSERT(err >= 0, "finding ADF configuration failed: %s\n", strerror(-err));
+  intf = adf_interface_open(&dev, intf_id, O_RDWR);
+  ASSERT(intf >= 0, "opening ADF interface %d.%d failed: %s\n", dev_id, intf_id, strerror(-err));
+  eng = adf_overlay_engine_open(&dev, eng_id, O_RDWR);
+  ASSERT(eng >= 0, "opening ADF overlay engine %d.%d failed: %s\n", dev_id, eng_id, strerror(-err));
+  return 0;
+}
+
+int get8888Format(uint32_t *fmt, char fmt_str[ADF_FORMAT_STR_SIZE]) {
+  struct adf_overlay_engine_data data;
+  int err = adf_get_overlay_engine_data(eng, &data);
+  ASSERT(err >= 0, "getting ADF overlay engine data failed: %s\n", strerror(-err));
+
+  for (size_t i = 0; i < data.n_supported_formats; i++) {
+    for (size_t j = 0; j < n_fmt8888; j++) {
+      if (data.supported_formats[i] == fmt8888[j]) {
+        *fmt = data.supported_formats[i];
+        adf_format_str(*fmt, fmt_str);
+        adf_free_overlay_engine_data(&data);
+        return 0;
+      }
+    }
+  }
+
+  adf_free_overlay_engine_data(&data);
+  return 1;
+}
+
+
+void drawCheckerboard(void *buf, uint32_t w, uint32_t h, uint32_t pitch) {
+  uint8_t *buf8 = (uint8_t *)buf;
+  for (uint32_t y = 0; y < h / 2; y++) {
+    uint32_t *scanline = (uint32_t *)(buf8 + y * pitch);
+    for (uint32_t x = 0; x < w / 2; x++)
+      scanline[x] = 0xFF0000FF;
+    for (uint32_t x = w / 2; x < w; x++)
+      scanline[x] = 0xFF00FFFF;
+  }
+  for (uint32_t y = h / 2; y < h; y++) {
+    uint32_t *scanline = (uint32_t *)(buf8 + y * pitch);
+    for (uint32_t x = 0; x < w / 2; x++)
+      scanline[x] = 0xFFFF00FF;
+    for (uint32_t x = w / 2; x < w; x++)
+      scanline[x] = 0xFFFFFFFF;
+  }
+}
+
+int getInterfaceData(struct adf_interface_data *data) {
+  int err = adf_get_interface_data(intf, data);
+  ASSERT(err >= 0, "getting ADF interface data failed: %s\n", strerror(-err));
+  return 0;
+}
+
+int getCurrentMode(uint32_t *w, uint32_t *h) {
+  struct adf_interface_data data;
+  if (getInterfaceData(&data))
+    return 1;
+  *w = data.current_mode.hdisplay;
+  *h = data.current_mode.vdisplay;
+  adf_free_interface_data(&data);
+  return 0;
+}
+
+int blank(uint8_t mode) {
+  int err = adf_interface_blank(intf, mode);
+  ASSERT(err >= 0 || err == -EBUSY, "unblanking interface failed: %s\n", strerror(-err));
+  return 0;
+}
+
+int attach(void) {
+  int err = adf_device_attach(&dev, eng_id, intf_id);
+  ASSERT(err >= 0 || err == -EALREADY, "attaching overlay engine %d to interface %d failed: %s\n", eng_id, intf_id, strerror(-err));
+  return 0;
+}
+
+int detach(void) {
+  int err = adf_device_detach(&dev, eng_id, intf_id);
+  ASSERT(err >= 0 || err == -EINVAL, "detaching overlay engine %d from interface %d failed: %s\n", eng_id, intf_id, strerror(-err));
+  return 0;
+}
+
+int readVsyncTimestamp(uint64_t *timestamp) {
+  struct adf_event *event;
+  int err = adf_read_event(intf, &event);
+  ASSERT(err >= 0, "reading ADF event failed: %s\n", strerror(-err));
+
+  ASSERT_TRUE(ADF_EVENT_VSYNC != event->type);
+  ASSERT_TRUE(sizeof(struct adf_vsync_event) == event->length);
+
+  struct adf_vsync_event *vsync_event = (struct adf_vsync_event *)event;
+  *timestamp = vsync_event->timestamp;
+  free(event);
+  return 0;
+}
+
+int test_devices(void) {
+  printf("Testing devices\n");
+  adf_id_t *devs;
+  ssize_t n_devs = adf_devices(&devs);
+  free(devs);
+
+  ASSERT(n_devs >= 0, "enumerating ADF devices failed: %s\n", strerror(-n_devs));
+
+  ASSERT_TRUE(devs != NULL);
+  return 0;
+}
+
+int test_device_data(void) {
+  printf("Testing device_data\n");
+  struct adf_device_data data;
+  int err = adf_get_device_data(&dev, &data);
+  ASSERT(err >= 0, "getting ADF device data failed: %s\n", strerror(-err));
+
+  ASSERT_TRUE(data.n_attachments < ADF_MAX_ATTACHMENTS);
+  ASSERT_TRUE(data.n_allowed_attachments > 0U);
+  ASSERT_TRUE(data.n_allowed_attachments < ADF_MAX_ATTACHMENTS);
+  ASSERT_TRUE(data.custom_data_size < (size_t)ADF_MAX_CUSTOM_DATA_SIZE);
+  adf_free_device_data(&data);
+  return 0;
+}
+
+int test_interface_data(void) {
+  printf("Testing interface_data\n");
+  struct adf_interface_data data;
+  ASSERT_TRUE(getInterfaceData(&data) != 1);
+
+  ASSERT_TRUE(data.type < ADF_INTF_TYPE_MAX);
+  ASSERT_TRUE(data.dpms_state <= DRM_MODE_DPMS_OFF);
+  ASSERT_TRUE(1 == data.hotplug_detect);
+  ASSERT_TRUE(data.n_available_modes > 0U);
+  ASSERT_TRUE(data.custom_data_size < (size_t)ADF_MAX_CUSTOM_DATA_SIZE);
+  adf_free_interface_data(&data);
+  return 0;
+}
+
+int test_overlay_engine_data(void) {
+  printf("Testing overlay_engine_data\n");
+  struct adf_overlay_engine_data data;
+  int err = adf_get_overlay_engine_data(eng, &data);
+  ASSERT(err >= 0, "getting ADF overlay engine failed: %s\n", strerror(-err));
+
+  ASSERT_TRUE(data.n_supported_formats > 0U);
+  ASSERT_TRUE(data.n_supported_formats < ADF_MAX_SUPPORTED_FORMATS);
+  ASSERT_TRUE(data.custom_data_size < (size_t)ADF_MAX_CUSTOM_DATA_SIZE);
+  adf_free_overlay_engine_data(&data);
+  return 0;
+}
+
+int test_blank(void) {
+  printf("Testing blank\n");
+  int err = adf_interface_blank(intf, (uint8_t)-1);
+  ASSERT(-EINVAL == err, "setting bogus DPMS mode should have failed\n");
+
+  err = adf_interface_blank(eng, DRM_MODE_DPMS_OFF);
+  ASSERT(-EINVAL == err, "blanking overlay engine should have failed\n");
+
+  ASSERT_TRUE(blank(DRM_MODE_DPMS_OFF) != 1);
+  err = adf_interface_blank(intf, DRM_MODE_DPMS_OFF);
+  ASSERT(-EBUSY == err, "blanking interface twice should have failed\n");
+
+  ASSERT_TRUE(blank(DRM_MODE_DPMS_ON) != 1);
+  err = adf_interface_blank(intf, DRM_MODE_DPMS_ON);
+  ASSERT(-EBUSY == err, "unblanking interface twice should have failed\n");
+
+  struct adf_interface_data data;
+  ASSERT_TRUE(getInterfaceData(&data) != 1);
+  ASSERT_TRUE(DRM_MODE_DPMS_ON == data.dpms_state);
+  adf_free_interface_data(&data);
+  return 0;
+}
+
+int test_event(void) {
+  printf("Testing event\n");
+  printf("  testing enable bogus ADF event\n");
+  int err = adf_set_event(intf, ADF_EVENT_TYPE_MAX, true);
+  ASSERT(-EINVAL == err, "enabling bogus ADF event should have failed\n");
+
+  printf("  testing disable bogus ADF event\n");
+  err = adf_set_event(intf, ADF_EVENT_TYPE_MAX, false);
+  ASSERT(-EINVAL == err, "disabling bogus ADF event should have failed\n");
+
+  printf("  testing enable vsync event\n");
+  err = adf_set_event(intf, ADF_EVENT_VSYNC, true);
+  ASSERT(err >= 0, "enabling vsync event failed: %s\n", strerror(-err));
+
+  printf("  testing enable vsync event twice\n");
+  err = adf_set_event(intf, ADF_EVENT_VSYNC, true);
+  ASSERT(-EALREADY == err, "enabling vsync event twice should have failed\n");
+
+  printf("  testing blank(DRM_MODE_DPMS_ON)\n");
+  ASSERT_TRUE(blank(DRM_MODE_DPMS_ON) != 1);
+
+  printf("  testing read vsync timestamp\n");
+  uint64_t timestamp1, timestamp2;
+  ASSERT_TRUE(readVsyncTimestamp(&timestamp1) != 1);
+  ASSERT_TRUE(readVsyncTimestamp(&timestamp2) != 1);
+  ASSERT_TRUE(timestamp2 > timestamp1);
+
+  printf("  testing disable vsync event\n");
+  err = adf_set_event(intf, ADF_EVENT_VSYNC, false);
+  ASSERT(err >= 0, "disabling vsync event failed: %s\n", strerror(-err));
+
+  printf("  testing disable vsync event twice\n");
+  err = adf_set_event(intf, ADF_EVENT_VSYNC, false);
+  ASSERT(-EALREADY == err, "disabling vsync event twice should have failed\n");
+  return 0;
+}
+
+int test_attach(void) {
+  printf("Testing attach\n");
+  ASSERT_TRUE(attach() != 1);
+  int err = adf_device_attach(&dev, eng_id, intf_id);
+  ASSERT(-EALREADY == err, "attaching overlay engine %d to interface %d twice should have failed\n", eng_id, intf_id);
+
+  ASSERT_TRUE(detach() != 1);
+  err = adf_device_detach(&dev, eng_id, intf_id);
+  ASSERT(-EINVAL == err, "detaching overlay engine %d from interface %d twice should have failed\n", eng_id, intf_id);
+
+  err = adf_device_attach(&dev, eng_id, ADF_MAX_INTERFACES);
+  ASSERT(-EINVAL == err, "attaching overlay engine %d to bogus interface should have failed\n", eng_id);
+
+  err = adf_device_detach(&dev, eng_id, ADF_MAX_INTERFACES);
+  ASSERT(-EINVAL == err, "detaching overlay engine %d from bogus interface should have failed\n", eng_id);
+  return 0;
+}
+
+int test_simple_buffer_alloc(void) {
+  printf("Testing simple_buffer_alloc\n");
+  uint32_t w = 0, h = 0;
+  ASSERT_TRUE(getCurrentMode(&w, &h) != 1);
+
+  uint32_t format;
+  char format_str[ADF_FORMAT_STR_SIZE];
+  ASSERT_TRUE(get8888Format(&format, format_str) != 1);
+
+  uint32_t offset;
+  uint32_t pitch;
+  int buf_fd = adf_interface_simple_buffer_alloc(intf, w, h, format, &offset,
+      &pitch);
+  ASSERT(buf_fd >= 0, "allocating %dx%d %s buffer failed: %s\n", w, h, format_str, strerror(-buf_fd));
+  ASSERT_TRUE(pitch >= w * 4);
+  close(buf_fd);
+
+  buf_fd = adf_interface_simple_buffer_alloc(intf, w, h, 0xDEADBEEF, &offset,
+      &pitch);
+  /* n.b.: ADF only allows simple buffers with built-in RGB formats,
+     so this should fail even if a driver supports custom format 0xDEADBEEF */
+  ASSERT(-EINVAL == buf_fd, "allocating buffer with bogus format should have failed\n");
+  return 0;
+}
+
+int test_simple_buffer() {
+  uint32_t w = 0, h = 0;
+  ASSERT_TRUE(getCurrentMode(&w, &h) != 1);
+
+  uint32_t format = 0;
+  char format_str[ADF_FORMAT_STR_SIZE];
+  ASSERT_TRUE(get8888Format(&format, format_str) != 1);
+
+  uint32_t offset;
+  uint32_t pitch;
+  int buf_fd = adf_interface_simple_buffer_alloc(intf, w, h, format, &offset,
+      &pitch);
+
+  ASSERT(buf_fd >= 0, "allocating %dx%d %s buffer failed: %s\n", w, h, format_str, strerror(-buf_fd));
+  ASSERT_TRUE(pitch >= w * 4);
+
+  void *mapped = mmap(NULL, pitch * h, PROT_WRITE, MAP_SHARED, buf_fd,
+      offset);
+  ASSERT(mapped != MAP_FAILED, "mapping %dx%d %s buffer failed: %s\n", w, h, format_str, strerror(-errno));
+  drawCheckerboard(mapped, w, h, pitch);
+  munmap(mapped, pitch * h);
+
+  ASSERT_TRUE(attach() != 1);
+  ASSERT_TRUE(blank(DRM_MODE_DPMS_ON) != 1);
+
+  int release_fence = adf_interface_simple_post(intf, eng_id, w, h, format,
+      buf_fd, offset, pitch, -1);
+  close(buf_fd);
+  ASSERT(release_fence >= 0, "posting %dx%d %s buffer failed: %s\n", w, h, format_str, strerror(-release_fence));
+  close(release_fence);
+  return 0;
+}
+
+int main() {  
+  if (setup()) {
+    printf("setup failed\n");
+    teardown();
+    return 1;
+  }
+  if (test_devices()) {
+    printf("test_devices failed\n");
+    teardown();
+    return 1;
+  }
+  if (test_device_data()) {
+    printf("test_device_data failed\n");
+    teardown();
+    return 1;
+  }
+  if (test_interface_data()) {
+    printf("test_interface_data failed\n");
+    teardown();
+    return 1;
+  }
+  if (test_overlay_engine_data()) {
+    printf("test_overlay_engine_data failed\n");
+    teardown();
+    return 1;
+  }
+  if (test_blank()) {
+    printf("test_blank failed\n");
+    teardown();
+    return 1;
+  }
+  if (test_event()) {
+    printf("test_event failed\n");
+    teardown();
+    return 1;
+  }
+  if (test_attach()) {
+    printf("test_attach failed\n");
+    teardown();
+    return 1;
+  }
+  if (test_simple_buffer_alloc()) {
+    printf("test_simple_buffer_alloc failed\n");
+    teardown();
+    return 1;
+  }
+  if (test_simple_buffer()) {
+    printf("test_simple_buffer failed\n");
+    teardown();
+    return 1;
+  }
+  teardown();
+  return 0;
+}
-- 
2.46.0

